    plugins {
        id 'java'
        id 'org.springframework.boot' version '3.4.4'
        id 'io.spring.dependency-management' version '1.1.7'
    }

    group = 'org.hanihome'
    version = '0.0.1-SNAPSHOT'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        // jpa
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

        // mysql
        runtimeOnly 'com.mysql:mysql-connector-j'

        // h2DB for test
        runtimeOnly 'com.h2database:h2'

        // QueryDSL
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta' // Q타입 생성
        annotationProcessor("jakarta.persistence:jakarta.persistence-api:3.1.0") // 어노테이션 분석용(JPA 어노테이션 모음)
        annotationProcessor("jakarta.annotation:jakarta.annotation-api:2.1.1")   // 어노테이션 분석용(Jakarta 어노테이션 모음)

        // spring web
        implementation 'org.springframework.boot:spring-boot-starter-web'

        //spring test
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

        //lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'


        // security
        implementation 'org.springframework.boot:spring-boot-starter-security'

        //jwt관련
        implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
        runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
        runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

        //구글 인증 관련
        implementation 'com.google.api-client:google-api-client:2.0.0'

        //환경변수
        implementation 'io.github.cdimascio:dotenv-java:3.0.0'

        //redis
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'

        //swagger
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

        //validation
        implementation 'org.springframework.boot:spring-boot-starter-validation'

        //json patch
        implementation 'com.github.java-json-tools:json-patch:1.13'

        // Jackson 확장 모듈(Optional)
        implementation 'org.openapitools:jackson-databind-nullable:0.2.6'

        //MapStruct
        implementation 'org.mapstruct:mapstruct:1.6.3'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
        // Lombok + MapStruct 호환
        implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

        // dotenv
        testImplementation 'io.github.cdimascio:dotenv-java:3.0.0'

        //s3
        implementation 'software.amazon.awssdk:s3:2.27.3'
        implementation 'com.amazonaws:aws-java-sdk-s3:1.12.767'
        implementation 'software.amazon.awssdk:s3:2.27.3'
        implementation 'software.amazon.awssdk:s3control:2.27.3'
        implementation 'software.amazon.awssdk:s3outposts:2.27.3'

        // logging
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-aop'

        // Spring Java Mail
        implementation 'org.springframework.boot:spring-boot-starter-mail'

    }

    def querydslDir = "build/generated/querydsl"

    //여기 있는 소스도 main 코드처럼 컴파일하라 (읽기 대상 등록)
    sourceSets {
        main.java.srcDirs += [querydslDir]
    }

    // Annotation Processor 출력 경로 설정
    // QueryDSL APT가 이 경로에 Q 파일을 생성하라
    // 1. JavaCompile 태스크에 직접 설정 (권장)
    tasks.withType(JavaCompile) {
        options.generatedSourceOutputDirectory = file(querydslDir)
    }

    // clean 태스크 실행시 Q타입 디렉토리 삭제
    clean {
        delete file(querydslDir)
    }

    tasks.named('test') {

        useJUnitPlatform()
        //./gradlew test 실행 시 자동으로 .env.test 주입
        def envFile = rootProject.file(".env.test") //.env.test 확인

        /*
        env.test 파일이 존재한다면
        한줄한줄 읽어서 key value 분리해서 주입
         */
        if (envFile.exists()) {
            println ".env.test detected — applying environment variables..."
            envFile.eachLine { line ->
                if (!line.startsWith("#") && line.contains("=")) {
                    def (key, value) = line.split("=", 2)
                    environment key.trim(), value.trim()
                }
            }
        } else {
            //env.test 없으면 출력
            println ".env.test not found. Skipping env injection."
        }
    }
